<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://jrdev.io//</id><title>Jr Dev</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2024-05-14T17:07:12-05:00</updated> <author> <name>Cameron Young</name> <uri>https://jrdev.io//</uri> </author><link rel="self" type="application/atom+xml" href="https://jrdev.io//feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://jrdev.io//"/> <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator> <rights> © 2024 Cameron Young </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Clean Architecture Take Away Part 1</title><link href="https://jrdev.io//posts/Clean-Architecture-Take-Away-Part-1/" rel="alternate" type="text/html" title="Clean Architecture Take Away Part 1" /><published>2024-05-14T00:00:00-05:00</published> <updated>2024-05-14T17:06:37-05:00</updated> <id>https://jrdev.io//posts/Clean-Architecture-Take-Away-Part-1/</id> <content src="https://jrdev.io//posts/Clean-Architecture-Take-Away-Part-1/" /> <author> <name>Cameron Young</name> </author> <category term="Blogging" /> <summary> The Take away Over the last few months, I have reviewed clean architecture, the book, and various codebases. Then, I engaged with the tech community around me on Twitter. Currently, my takeaway is that clean architecture is just an implementation of software principles, allowing for the adoption of various architectural styles such as layered, service-based, and event-driven. Many people I di... </summary> </entry> <entry><title>Minimal APIs in C#: A Step Past the Beginner’s Guide</title><link href="https://jrdev.io//posts/Minimal-API-A-Step-Past-The-Beginners-Guide/" rel="alternate" type="text/html" title="Minimal APIs in C#: A Step Past the Beginner’s Guide" /><published>2023-06-12T00:00:00-05:00</published> <updated>2023-06-12T00:00:00-05:00</updated> <id>https://jrdev.io//posts/Minimal-API-A-Step-Past-The-Beginners-Guide/</id> <content src="https://jrdev.io//posts/Minimal-API-A-Step-Past-The-Beginners-Guide/" /> <author> <name>Cameron Young</name> </author> <category term="Blogging" /> <category term="API" /> <summary> Introduction: Being in the C# space for over six plus years. You get in the habit of doing things the dotnet way. I personally like that dotnet is very vocal in patterns and how to structure things. With the release of dotnet 6 we have access to Minimal APIs. While C# pays my bills and is my personal favorite. (followed by swift it has been growing on me) I have used other languages. When I fir... </summary> </entry> <entry><title>Coupling and Cohesion</title><link href="https://jrdev.io//posts/Coupling-And-Cohesion/" rel="alternate" type="text/html" title="Coupling and Cohesion" /><published>2023-04-29T00:00:00-05:00</published> <updated>2023-04-29T00:00:00-05:00</updated> <id>https://jrdev.io//posts/Coupling-And-Cohesion/</id> <content src="https://jrdev.io//posts/Coupling-And-Cohesion/" /> <author> <name>Cameron Young</name> </author> <category term="Blogging" /> <category term="Coding Examples" /> <summary> Software design principles like coupling and cohesion play a significant role in determining the quality and maintainability of software systems. When high coupling and low cohesion exist, the software system can become challenging to maintain and modify. On the other hand, low coupling and high cohesion can make a system more adaptable, easier to comprehend, and maintain. Coupling measures ho... </summary> </entry> <entry><title>Working With WebApplicationFactory</title><link href="https://jrdev.io//posts/Working-With-WebApplicationFactory/" rel="alternate" type="text/html" title="Working With WebApplicationFactory" /><published>2023-02-02T00:00:00-06:00</published> <updated>2023-02-03T10:50:24-06:00</updated> <id>https://jrdev.io//posts/Working-With-WebApplicationFactory/</id> <content src="https://jrdev.io//posts/Working-With-WebApplicationFactory/" /> <author> <name>Cameron Young</name> </author> <category term="Blogging" /> <summary> Throughout my career, I have seen the testing pyramid. I was under the impression that one should create more unit tests than integration tests with a dash of UI testing. The first part of my career. I was an automation developer. So, I only did UI testing. After moving back to the formal development side. To my shock many of the places I worked. Testing was not integral to the dev process. Per... </summary> </entry> <entry><title>Using Tests To Speed up FeedBack Loop</title><link href="https://jrdev.io//posts/Jumping-Into-Testing/" rel="alternate" type="text/html" title="Using Tests To Speed up FeedBack Loop" /><published>2022-02-02T00:00:00-06:00</published> <updated>2022-02-09T21:28:22-06:00</updated> <id>https://jrdev.io//posts/Jumping-Into-Testing/</id> <content src="https://jrdev.io//posts/Jumping-Into-Testing/" /> <author> <name>Cameron Young</name> </author> <category term="blogging" /> <category term="testing" /> <summary> Why Do I Even Care to Test? I have worked in a few code bases that only had tests at the center layers of the application. The team would rarely touch that code plus there is a good chance the test was stale. Any massive feature would lead to so much manual regression. We would lose up to a week of the sprint. Coming from a Q.A. background there is a process to do a manual regression. There are... </summary> </entry> </feed>
